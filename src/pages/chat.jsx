import Header from "@/components/Header"
import Head from "next/head"

import styles from "../styles/Chat.module.css"
import ChatLayout from "@/components/ChatLayout"
import ContactsLayout from "@/components/ContactsLayout"
import { useState, useEffect } from "react"
import { getAccount, requestAccount } from "@/web3-services/metamask_connection"
import { getFriends, checkUserExist, readMessage, sendMessage, getDecentralizedChat } from "@/web3-services/decentralized_chat_functions"
import GenericLink from "@/components/GenericLink"

const Chat = () => {

    const [contact, setContact] = useState({
        userName:"standardUsername",
        accountAddress: "standardAddress"

    })
    const [account, setAccount] = useState("")
    const [chatLog, setChatLog] = useState([])
    const [friends, setFriends] = useState([])
    const [userExist, setUserExist] = useState(false)
    const [messageInput, setMessageInput] = useState("")




    async function getAccountOnRender() {
        try {
            setContact({
                userName: "",
                accountAddress: ""
            })
            setChatLog([])
            const returnedAccount = await getAccount();
            setAccount(returnedAccount);
            const exist = await checkUserExist(returnedAccount)
            setUserExist(exist)
            const result = await getFriends(returnedAccount);

            setFriends(result);


        } catch (err) {
            console.log(err);

        }
    }



    useEffect(() => {
        getAccountOnRender()
        if (window.ethereum) {
            window.ethereum.on("accountsChanged", () => {

                getAccountOnRender()
                return () => {
                    if (account) {
                        // Unsubscribe from the event
                        getDecentralizedChat().events.MessageSent().unsubscribe();
                    }
                };
            })
        }


        async function listenToMessageSentEvent() {
            getDecentralizedChat().events.MessageSent({filter:{to:account}}, (error, event) => {
                if (!error && event.returnValues) {
                    const newMessage = {
                        sender: event.returnValues.from,
                        _msg: event.returnValues.message,
                        timestamp: event.returnValues.timestamp,
                        to: event.returnValues.to,
                    };

                    
                    setChatLog((prevChatLog) => [...prevChatLog, newMessage]);


                }
            });
        }
        if (account) {
            listenToMessageSentEvent();
        }
        return () => {
            if (account) {
                // Unsubscribe from the event
                getDecentralizedChat().events.MessageSent().unsubscribe();
            }
        };
    }, [account]);
   

    function handleClick() {
        requestAccount().then((result) => {
            setAccount(result)
        }).catch((err) => {

            console.log("caiu no catch")

            console.log(err)
        });
    }

    async function handleContactCardOnClick(index) {


        setContact(prevState => ({
            ...prevState,
            userName: friends[index].userName,
            accountAddress: friends[index].accountAddress
        }));

        const chat = await readMessage(account, friends[index].accountAddress)

        setChatLog(chat)
        

    }

    async function handleSendButtonClick() {
        if (messageInput.length === 0) {
            alert("Type a valid Message!")
        } else {
            try {
                const tx = await sendMessage(account, contact.accountAddress, messageInput)
                setMessageInput("")
                const chatMessage = {
                    sender: tx.events.MessageSent.returnValues.from,
                    _msg: tx.events.MessageSent.returnValues.message,
                    timestamp: tx.events.MessageSent.returnValues.timestamp,
                    to: tx.events.MessageSent.returnValues.to
                };
                setChatLog(prevChatLog => [...prevChatLog, chatMessage]);
               
            } catch (error) {

                console.log(error)
            }
        }

    }
    function handleInputChange(e) {
        setMessageInput(e.target.value)
    }

    return (
        <>


            <Head>
                <title>Decentralized Chat</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header containsNavBar={true} account={account} onClick={handleClick} />
            {
                account && userExist ? (


                    <main className={styles.chatSection}>

                        <div className={styles.contactsContainer}>
                            <ContactsLayout friends={friends} onClick={handleContactCardOnClick} />
                        </div>
                        <div className={styles.chatContainer}>
                            <ChatLayout messageInput={messageInput} onClick={handleSendButtonClick} onChange={handleInputChange} connectedAccount={account} chatLog={chatLog} contactNickname={contact.userName} contactAddress={contact.accountAddress} />
                        </div>
                    </main>


                ) : (
                    <main className={styles.errorPage}>
                        <div>
                            <h1>Connect your Wallet First!</h1>
                            <h2>Are you connected?</h2>
                            <GenericLink textContent={"Register Here!"} to={"/register"} />
                        </div>
                    </main>)
            }

        </>
    )

}

export default Chat
